{"version":3,"sources":["components/NavBar/NavBar.tsx","App.tsx","components/HomePage/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PersonRow/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFoundPage/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["NavBar","getClassName","isActive","classNames","className","role","to","App","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","name","PersonRow","useParams","getParentText","parent","parentName","born","died","mother","motherName","father","fatherName","PeopleTable","people","map","preparePeople","peopleFromServer","find","PeoplePage","useState","isLoading","setIsLoading","setPeople","errorMessage","setErrorMessage","loadPeople","peopleData","useEffect","loadingState","error","peopleArray","length","NotFoundPage","Root","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5e0ba9da.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => {\n  const getClassName = ({ isActive }: { isActive: boolean }) => {\n    return (classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    }));\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getClassName}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getClassName}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../people/${person.slug}`}\n      className={classNames({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonRow: React.FC<Props> = ({ person }) => {\n  const { slug } = useParams();\n\n  const getParentText = (\n    parent: Person | undefined,\n    parentName: string | null,\n  ) => {\n    if (parent) {\n      return <PersonLink person={parent} />;\n    }\n\n    if (parentName) {\n      return parentName;\n    }\n\n    return '-';\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': person.slug === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {getParentText(person.mother, person.motherName)}\n      </td>\n      <td>\n        {getParentText(person.father, person.fatherName)}\n      </td>\n    </tr>\n  );\n};\n","import { Person } from '../../types';\nimport { PersonRow } from '../PersonRow';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonRow person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { Loader } from '../Loader';\n// import { PersonRow } from '../PersonRow';\nimport { PeopleTable } from '../PeopleTable';\n\nconst preparePeople = (peopleFromServer: Person[]): Person[] => {\n  return peopleFromServer.map((person) => ({\n    ...person,\n    mother: peopleFromServer.find(mother => mother.name === person.motherName),\n    father: peopleFromServer.find(father => father.name === person.fatherName),\n  }));\n};\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const loadPeople = async () => {\n    setIsLoading(true);\n\n    try {\n      const peopleData = await getPeople();\n\n      setPeople(preparePeople(peopleData));\n    } catch {\n      setErrorMessage('Something went wrong');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  const getBody = (\n    loadingState: boolean,\n    error: string,\n    peopleArray: Person[],\n  ) => {\n    if (loadingState) {\n      return <Loader />;\n    }\n\n    if (error && !loadingState) {\n      return (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          {error}\n        </p>\n      );\n    }\n\n    if (!peopleArray.length && !loadingState) {\n      return (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      );\n    }\n\n    return (\n      <PeopleTable people={peopleArray} />\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {getBody(isLoading, errorMessage, people)}\n          {/* {isLoading && <Loader />}\n\n          {errorMessage && !isLoading\n          && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {!people.length && !isLoading\n          && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {people.length && !isLoading\n          && (\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {people.map(person => (\n                  <PersonRow person={person} key={person.slug} />\n                ))}\n              </tbody>\n            </table>\n          )} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route path=\"/\" element={<HomePage />} />\n\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"/people\" element={<PeoplePage />}>\n          <Route\n            path=\"/people/:slug?\"\n            element={<PeoplePage />}\n          />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}